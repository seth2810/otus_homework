// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: api/EventService.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// define the regex for a UUID once up-front
var _event_service_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Event with the rules defined in the
// proto definition for this message. If any rules are violated, an error is
// returned. When asked to return all errors, validation continues after first
// violation, and the result is a list of violation errors wrapped in
// EventMultiError, or nil if none found. Otherwise, only the first error is
// returned, if any.
func (m *Event) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	if v, ok := interface{}(m.GetStartsAt()).(interface{ Validate(bool) error }); ok {
		if err := v.Validate(all); err != nil {
			err = EventValidationError{
				field:  "StartsAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if v, ok := interface{}(m.GetDuration()).(interface{ Validate(bool) error }); ok {
		if err := v.Validate(all); err != nil {
			err = EventValidationError{
				field:  "Duration",
				reason: "embedded message failed validation",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	// no validation rules for Description

	// no validation rules for OwnerId

	if v, ok := interface{}(m.GetNotifyBefore()).(interface{ Validate(bool) error }); ok {
		if err := v.Validate(all); err != nil {
			err = EventValidationError{
				field:  "NotifyBefore",
				reason: "embedded message failed validation",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if len(errors) > 0 {
		return EventMultiError(errors)
	}
	return nil
}

// EventMultiError is an error wrapping multiple validation errors returned by
// Event.Validate(true) if the designated constraints aren't met.
type EventMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EventMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EventMultiError) AllErrors() []error { return m }

// EventValidationError is the validation error returned by Event.Validate if
// the designated constraints aren't met.
type EventValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EventValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EventValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EventValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EventValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EventValidationError) ErrorName() string { return "EventValidationError" }

// Error satisfies the builtin error interface
func (e EventValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEvent.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EventValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EventValidationError{}

// Validate checks the field values on CreateEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in CreateEventRequestMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *CreateEventRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetTitle()) < 10 {
		err := CreateEventRequestValidationError{
			field:  "Title",
			reason: "value length must be at least 10 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateEventRequestMultiError(errors)
	}
	return nil
}

// CreateEventRequestMultiError is an error wrapping multiple validation errors
// returned by CreateEventRequest.Validate(true) if the designated constraints
// aren't met.
type CreateEventRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateEventRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateEventRequestMultiError) AllErrors() []error { return m }

// CreateEventRequestValidationError is the validation error returned by
// CreateEventRequest.Validate if the designated constraints aren't met.
type CreateEventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEventRequestValidationError) ErrorName() string {
	return "CreateEventRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEventRequestValidationError{}

// Validate checks the field values on CreateEventResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in CreateEventResponseMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *CreateEventResponse) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateEventResponseMultiError(errors)
	}
	return nil
}

// CreateEventResponseMultiError is an error wrapping multiple validation
// errors returned by CreateEventResponse.Validate(true) if the designated
// constraints aren't met.
type CreateEventResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateEventResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateEventResponseMultiError) AllErrors() []error { return m }

// CreateEventResponseValidationError is the validation error returned by
// CreateEventResponse.Validate if the designated constraints aren't met.
type CreateEventResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateEventResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateEventResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateEventResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateEventResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateEventResponseValidationError) ErrorName() string {
	return "CreateEventResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateEventResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateEventResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateEventResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateEventResponseValidationError{}

// Validate checks the field values on UpdateEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in UpdateEventRequestMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *UpdateEventRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = UpdateEventRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTitle()) < 10 {
		err := UpdateEventRequestValidationError{
			field:  "Title",
			reason: "value length must be at least 10 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetStartsAt() == nil {
		err := UpdateEventRequestValidationError{
			field:  "StartsAt",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetDuration() == nil {
		err := UpdateEventRequestValidationError{
			field:  "Duration",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Description

	if v, ok := interface{}(m.GetNotifyBefore()).(interface{ Validate(bool) error }); ok {
		if err := v.Validate(all); err != nil {
			err = UpdateEventRequestValidationError{
				field:  "NotifyBefore",
				reason: "embedded message failed validation",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if len(errors) > 0 {
		return UpdateEventRequestMultiError(errors)
	}
	return nil
}

func (m *UpdateEventRequest) _validateUuid(uuid string) error {
	if matched := _event_service_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// UpdateEventRequestMultiError is an error wrapping multiple validation errors
// returned by UpdateEventRequest.Validate(true) if the designated constraints
// aren't met.
type UpdateEventRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateEventRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateEventRequestMultiError) AllErrors() []error { return m }

// UpdateEventRequestValidationError is the validation error returned by
// UpdateEventRequest.Validate if the designated constraints aren't met.
type UpdateEventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEventRequestValidationError) ErrorName() string {
	return "UpdateEventRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEventRequestValidationError{}

// Validate checks the field values on UpdateEventResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in UpdateEventResponseMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *UpdateEventResponse) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if v, ok := interface{}(m.GetEvent()).(interface{ Validate(bool) error }); ok {
		if err := v.Validate(all); err != nil {
			err = UpdateEventResponseValidationError{
				field:  "Event",
				reason: "embedded message failed validation",
				cause:  err,
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
	}

	if len(errors) > 0 {
		return UpdateEventResponseMultiError(errors)
	}
	return nil
}

// UpdateEventResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateEventResponse.Validate(true) if the designated
// constraints aren't met.
type UpdateEventResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateEventResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateEventResponseMultiError) AllErrors() []error { return m }

// UpdateEventResponseValidationError is the validation error returned by
// UpdateEventResponse.Validate if the designated constraints aren't met.
type UpdateEventResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateEventResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateEventResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateEventResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateEventResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateEventResponseValidationError) ErrorName() string {
	return "UpdateEventResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateEventResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateEventResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateEventResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateEventResponseValidationError{}

// Validate checks the field values on DeleteEventRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in DeleteEventRequestMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *DeleteEventRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetId()); err != nil {
		err = DeleteEventRequestValidationError{
			field:  "Id",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return DeleteEventRequestMultiError(errors)
	}
	return nil
}

func (m *DeleteEventRequest) _validateUuid(uuid string) error {
	if matched := _event_service_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// DeleteEventRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteEventRequest.Validate(true) if the designated constraints
// aren't met.
type DeleteEventRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteEventRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteEventRequestMultiError) AllErrors() []error { return m }

// DeleteEventRequestValidationError is the validation error returned by
// DeleteEventRequest.Validate if the designated constraints aren't met.
type DeleteEventRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteEventRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteEventRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteEventRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteEventRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteEventRequestValidationError) ErrorName() string {
	return "DeleteEventRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteEventRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteEventRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteEventRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteEventRequestValidationError{}

// Validate checks the field values on ListEventsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned. When asked to return all errors, validation continues
// after first violation, and the result is a list of violation errors wrapped
// in ListEventsRequestMultiError, or nil if none found. Otherwise, only the
// first error is returned, if any.
func (m *ListEventsRequest) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetDate() == nil {
		err := ListEventsRequestValidationError{
			field:  "Date",
			reason: "value is required",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListEventsRequestMultiError(errors)
	}
	return nil
}

// ListEventsRequestMultiError is an error wrapping multiple validation errors
// returned by ListEventsRequest.Validate(true) if the designated constraints
// aren't met.
type ListEventsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEventsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEventsRequestMultiError) AllErrors() []error { return m }

// ListEventsRequestValidationError is the validation error returned by
// ListEventsRequest.Validate if the designated constraints aren't met.
type ListEventsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEventsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEventsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEventsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEventsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEventsRequestValidationError) ErrorName() string {
	return "ListEventsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListEventsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEventsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEventsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEventsRequestValidationError{}

// Validate checks the field values on ListEventsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned. When asked to return all errors, validation
// continues after first violation, and the result is a list of violation
// errors wrapped in ListEventsResponseMultiError, or nil if none found.
// Otherwise, only the first error is returned, if any.
func (m *ListEventsResponse) Validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEvents() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate(bool) error }); ok {
			if err := v.Validate(all); err != nil {
				err = ListEventsResponseValidationError{
					field:  fmt.Sprintf("Events[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
				if !all {
					return err
				}
				errors = append(errors, err)
			}
		}

	}

	if len(errors) > 0 {
		return ListEventsResponseMultiError(errors)
	}
	return nil
}

// ListEventsResponseMultiError is an error wrapping multiple validation errors
// returned by ListEventsResponse.Validate(true) if the designated constraints
// aren't met.
type ListEventsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListEventsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListEventsResponseMultiError) AllErrors() []error { return m }

// ListEventsResponseValidationError is the validation error returned by
// ListEventsResponse.Validate if the designated constraints aren't met.
type ListEventsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListEventsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListEventsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListEventsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListEventsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListEventsResponseValidationError) ErrorName() string {
	return "ListEventsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListEventsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListEventsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListEventsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListEventsResponseValidationError{}
